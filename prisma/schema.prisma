generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  password     String
  role         UserRole      @default(PROFESSOR)
  department   String?
  avatar       String?
  timezone     String?
  language     String?       @default("English")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  canvasConfig CanvasConfig?
  courses      Course[]
  students     Student[]
}

model Course {
  id             String              @id @default(cuid())
  name           String
  code           String              @unique
  description    String?
  credits        Int                 @default(3)
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  instructorId   String
  canvasCourseId String?
  announcements  Announcement[]
  assignments    Assignment[]
  instructor     User                @relation(fields: [instructorId], references: [id])
  lectures       Lecture[]
  students       StudentEnrollment[]
}

model Student {
  id              String              @id @default(cuid())
  name            String
  email           String              @unique
  avatar          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  professorId     String?
  canvasStudentId String?
  attendances     Attendance[]
  engagements     StudentEngagement[]
  professor       User?               @relation(fields: [professorId], references: [id])
  badges          StudentBadge[]
  enrollments     StudentEnrollment[]
  submissions     Submission[]
}

model StudentEnrollment {
  id         String   @id @default(cuid())
  status     String   @default("ACTIVE")
  enrolledAt DateTime @default(now())
  studentId  String
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
}

model Assignment {
  id                 String         @id @default(cuid())
  title              String
  description        String?
  dueDate            DateTime
  pointsPossible     Float          @default(100)
  weight             Float?
  assignmentType     AssignmentType
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  courseId           String
  canvasAssignmentId String?
  course             Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions        Submission[]
}

model Submission {
  id                 String           @id @default(cuid())
  submittedAt        DateTime         @default(now())
  score              Float?
  feedback           String?
  isLate             Boolean          @default(false)
  status             SubmissionStatus @default(SUBMITTED)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  studentId          String
  assignmentId       String
  canvasSubmissionId String?
  assignment         Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student            Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, assignmentId])
}

model Lecture {
  id          String       @id @default(cuid())
  title       String
  description String?
  date        DateTime
  duration    Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courseId    String
  isActive    Boolean      @default(false)
  attendances Attendance[]
  engagements StudentEngagement[]
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Attendance {
  id        String           @id @default(cuid())
  status    AttendanceStatus @default(PRESENT)
  createdAt DateTime         @default(now())
  joinTime  DateTime?
  leaveTime DateTime?
  studentId String
  lectureId String
  lecture   Lecture          @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, lectureId])
}

model Badge {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  icon        String?
  createdAt   DateTime       @default(now())
  students    StudentBadge[]
}

model StudentBadge {
  id        String   @id @default(cuid())
  awardedAt DateTime @default(now())
  studentId String
  badgeId   String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, badgeId])
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  isImportant Boolean  @default(false)
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CanvasConfig {
  id           String    @id @default(cuid())
  apiUrl       String
  apiToken     String
  isActive     Boolean   @default(false)
  lastSyncedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ScoringConfig {
  id                    String    @id @default(cuid())
  userId                String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now())

  // Scoring Settings
  participationScore    Int       @default(5)
  engagementScore      Int       @default(5)
  attendanceScore      Int       @default(5)
  answerScore          Int       @default(15)
  talkingBadScore      Int       @default(-10)
  attendanceBadScore   Int       @default(-10)
  repeatedBadScore     Int       @default(-20)
}

model ThresholdConfig {
  id                    String    @id @default(cuid())
  userId                String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now())

  // Threshold Settings
  attendanceThreshold   Int       @default(70)
  engagementThreshold   Int       @default(60)
  atRiskThreshold       Int       @default(60)
  maxScoreThreshold     Int       @default(100)
  minScoreThreshold     Int       @default(0)
}

model DecayConfig {
  id                    String    @id @default(cuid())
  userId                String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now())

  // Decay Settings
  decayRate            Float     @default(0.5)
  decayInterval        Int       @default(1)
  decayThreshold       Float     @default(0.5)
}

model BonusConfig {
  id                    String    @id @default(cuid())
  userId                String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now())

  // Bonus Settings
  enableThreeStreak    Boolean   @default(true)
  threeStreakBonus     Int       @default(10)
  enableFiveStreak     Boolean   @default(true)
  fiveStreakBonus      Int       @default(20)
  constantEngagementBonus Int     @default(20)
}

model AdvancedConfig {
  id                    String    @id @default(cuid())
  userId                String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now())

  // Advanced Settings
  automaticRiskDetection Boolean  @default(true)
  realTimeAnalytics     Boolean   @default(true)
  engagementNotifications Boolean @default(true)
}

model Deadzone {
  id          String    @id @default(cuid())
  userId      String
  name        String
  coordinates Json      // Store the deadzone coordinates as JSON
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  @@unique([userId, name])
}

model StudentEngagement {
  id                 String   @id @default(cuid())
  timestamp          DateTime @default(now())
  attentionDuration  Int      @default(0) // Duration in seconds student was focused
  distractionCount   Int      @default(0)
  focusScore         Int      @default(0) // 0-100 percentage
  handRaisedCount    Int      @default(0)
  recognitionStatus  String   @default("known")
  engagementLevel    String   @default("medium") // high, medium, low
  detectionCount     Int      @default(0) // How many times detected in this lecture
  averageConfidence  Float    @default(0)
  lectureId          String
  studentId          String
  lecture            Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  student            Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  detectionSnapshots Json[]   // Store array of detection data snapshots

  @@unique([studentId, lectureId])
}

enum UserRole {
  PROFESSOR
  TEACHING_ASSISTANT
  ADMIN
}

enum AssignmentType {
  QUIZ
  ASSIGNMENT
  DISCUSSION
  EXAM
  PROJECT
  OTHER
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  RESUBMITTED
  PENDING
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}
